<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post View</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Your existing CSS styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #fff;
            height: 100vh;
            overflow: hidden;
        }

        .article-wrapper {
            height: 100vh;
            overflow-y: auto;
            scroll-snap-type: y mandatory;
            scroll-behavior: smooth;
        }

        .container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            scroll-snap-align: start;
            position: relative;
        }

        .media {
            flex: 1.3;
            width: 100vw;
            height: 40vh;
        }

        .media img {
            width: 100vw;
            height: 44vh;
            object-fit: cover;
        }

        .description {
            background-color: #181818;
            border-radius: 20px 20px 0 0;
            padding: 10px;
            overflow-y: auto;
            display: block;
            height: 100%;
        }

        .description h1 {
            font-size: 25px;
            color: #f4f4f4;
            margin-bottom: 10px;
            text-align: left;
        }

        .description p {
            font-size: 19px;
            color: #cfcfcf;
            text-align: left;
        }

        .footer-section {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            background-color: #121212;
            flex-shrink: 0;
        }

        .profile-info {
            display: flex;
            align-items: center;
            gap: 7px;
        }

        .username {
            font-size: large;
            color: #fff;
        }

        .profile-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }

        .follow {
            background-color: #ff4b5c;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            padding: 8px 12px;
        }

        .following {
            background-color: #ffffff00;
            color: white;
            border: 1px solid grey;
            border-radius: 20px;
            cursor: pointer;
            padding: 8px 12px;
        }

        .footer-icons i {
            font-size: 24px;
            color: #fff;
            margin-right: 10px;
            cursor: pointer;
            margin: 6px;
        }

        /* Styles for the three dots menu */
        .dots-menu {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #fff;
        }

        /* Styles for the pop-up */
        .popup {
            position: fixed;
            bottom: -100px;
            left: 0;
            right: 0;
            background-color: #222222;
            color: #fff;
            padding: 20px;
            border-radius: 20px 20px 0 0;
            text-align: center;
            transition: bottom 0.3s ease;
            display: none;
        }

        .popup.active {
            display: block;
            bottom: 0;
        }

        .popup-header {
            display: flex;
            justify-content: flex-end;
        }

        .popup-header i {
            font-size: 20px;
            color: #fff;
            cursor: pointer;
        }

        .popup-content p {
            margin: 0;
            font-size: 18px;
            cursor: pointer;
        }

        /* Liked heart (filled) */
        .liked {
            color: red !important;
        }

        /* Saved bookmark (filled) */
        .saved {
            color: white !important;
        }

        /* Styles for repost and share container */
    </style>
</head>

<body>

    <!-- Article Wrapper -->
    <!-- Article Wrapper -->
    <div class="article-wrapper" id="article-wrapper">
        <div class="container">
            <!-- Current Post -->
            <div class="media">
                <img src="<%= post.filePath %>" alt="<%= post.title %> Media">
            </div>
            <div class="description">
                <h1>
                    <%= post.title %>
                </h1>
                <div class="ad-space" style="margin: 20px 0; text-align: center;">
                    <!-- You can replace this with actual ad code -->
                    <img src="/path-to-ad-image.jpg" alt="Ad Banner" style="max-width: 100%; height: auto;">
                </div>
                <p>
                    <%= post.description %>
                </p>
            </div>
            <i class="fas fa-ellipsis-h dots-menu"
                onclick="showPopup(this, '<%= post.userid._id %>', '<%= userProfile._id %>', '<%= post._id %>')"></i>

            <div class="footer-section">
                <div class="profile-info">
                    <img src="<%= user.profilepic ? user.profilepic : '/default-profile.png' %>" alt="Profile Picture">
                    <h2 class="username">
                        <%= user.name ? user.name : 'Anonymous User' %>
                    </h2>
                    <% if (isFollowing) { %>
                        <button class="following" id="follow-btn">Following</button>
                        <% } else { %>
                            <button class="follow" id="follow-btn">Follow</button>
                            <% } %>
                </div>
                <div class="footer-icons">
                    <i class="<%= userProfile.likedPosts.map(p => p.toString()).includes(post._id.toString()) ? 'fas liked' : 'far' %> fa-heart"
                        onclick="toggleLike(this, '<%= post._id %>')"></i>
                    <i class="far fa-comment" onclick="redirectToComments('<%= post._id %>')"></i>
                    <i class="<%= userProfile.savedPosts.includes(post._id) ? 'fas saved' : 'far' %> fa-bookmark"
                        onclick="toggleBookmark(this, '<%= post._id %>', '<%= userProfile._id %>')"></i>
                </div>
            </div>
        </div>

        <!-- Additional Posts -->
        <% additionalPosts.forEach(function (additionalPost) { %>
            <div class="container">
                <div class="media">
                    <img src="<%= additionalPost.filePath %>" alt="<%= additionalPost.title %> Media">
                </div>
                <div class="description">
                    <h1>
                        <%= additionalPost.title %>
                    </h1>
                    <div class="ad-space" style="margin: 20px 0; text-align: center;">
                        <!-- You can replace this with actual ad code -->
                        <img src="/path-to-ad-image.jpg" alt="Ad Banner" style="max-width: 100%; height: auto;">
                    </div>
                    <p>
                        <%= additionalPost.description %>
                    </p>
                </div>
                <i class="fas fa-ellipsis-h dots-menu"
                    onclick="showPopup(this, '<%= additionalPost.userid._id %>', '<%= userProfile._id %>', '<%= additionalPost._id %>')"></i>

                <div class="footer-section">
                    <div class="profile-info">
                        <img src="<%= additionalPost.userid.profilepic ? additionalPost.userid.profilepic : '/default-profile.png' %>"
                            alt="Profile Picture">
                        <h2 class="username">
                            <%= additionalPost.userid.name ? additionalPost.userid.name : 'Anonymous User' %>
                        </h2>
                        <% if (isFollowing) { %>
                            <button class="following" id="follow-btn">Following</button>
                            <% } else { %>
                                <button class="follow" id="follow-btn">Follow</button>
                                <% } %>
                    </div>
                    <div class="footer-icons">
                        <!-- Like button -->
                        <i class="<%= userProfile.likedPosts.map(p => p.toString()).includes(additionalPost._id.toString()) ? 'fas liked' : 'far' %> fa-heart"
                            onclick="toggleLike(this, '<%= additionalPost._id %>')"></i>
                        <i class="far fa-comment" onclick="redirectToComments('<%= post._id %>')"></i>

                        <!-- Save button -->
                        <i class="<%= userProfile.savedPosts.map(p => p.toString()).includes(additionalPost._id.toString()) ? 'fas saved' : 'far' %> fa-bookmark"
                            onclick="toggleBookmark(this, '<%= additionalPost._id %>')"></i>


                    </div>
                </div>
            </div>
            <% }) %>
    </div>


    <!-- Pop-up for Delete option -->
    <div class="popup" id="popup">
        <!-- Header with close icon -->
        <div class="popup-header">
            <i class="fas fa-times" onclick="closePopup()"></i>
        </div>
        <!-- Content -->
        <div class="popup-content">
            <p onclick="deletePost('<%= post._id %>')">Delete</p>
        </div>
    </div>





    <script>
        // Show or hide the pop-up when three dots are clicked
        function showPopup(dotIcon, postOwnerId, currentUserId, postId) {
            const popup = document.getElementById('popup');
            const popupContent = document.querySelector('.popup-content');
            popupContent.innerHTML = ''; // Clear previous content

            if (postOwnerId === currentUserId) {
                // If the user is viewing their own post, show the delete option
                popupContent.innerHTML = `
            <p onclick="deletePost('${postId}')">Delete</p>
        `;
            } else {
                // If the post belongs to another user, show different options
                popupContent.innerHTML = `
                 <p>Share</p>
        `;
            }

            // Show the popup
            popup.classList.add('active');
        }

        // Close the pop-up when the close icon is clicked
        function closePopup() {
            const popup = document.getElementById('popup');
            popup.classList.remove('active');
        }

        function redirectToComments(postId) {
            window.location.href = `/comments/${postId}`; // Redirect to comments page
        }


        // Function to delete post
        function deletePost(postId) {
            if (confirm('Are you sure you want to delete this post?')) {
                fetch(`/deletePost/${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json(); // Attempt to parse JSON only if the response is OK
                    })
                    .then(data => {
                        if (data.message === 'Post deleted successfully') {
                            alert('Post deleted!');
                            window.location.href = '/profile'; // Redirect on the client side
                        } else {
                            alert('Error deleting post');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        window.location.href = '/profile';
                    });
            }
        }


        function toggleLike(heartIcon, postId) {
            fetch(`/like/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Post liked') {
                        // Add the 'liked' class to change the heart to red
                        heartIcon.classList.remove('far');
                        heartIcon.classList.add('fas', 'liked');
                    } else if (data.message === 'Post unliked') {
                        // Remove the 'liked' class to revert the heart to empty
                        heartIcon.classList.remove('fas', 'liked');
                        heartIcon.classList.add('far');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function toggleBookmark(bookmarkIcon, postId) {
            fetch(`/savePost/${postId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message === 'Post saved') {
                        // Add the 'saved' class to change the bookmark to filled
                        bookmarkIcon.classList.remove('far');
                        bookmarkIcon.classList.add('fas', 'saved');
                    } else if (data.message === 'Post unsaved') {
                        // Remove the 'saved' class to revert the bookmark to empty
                        bookmarkIcon.classList.remove('fas', 'saved');
                        bookmarkIcon.classList.add('far');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        //for scrolling
        document.addEventListener('DOMContentLoaded', function () {
            const articleWrapper = document.getElementById('article-wrapper');
            let currentPage = 1;
            let loading = false; // Prevent multiple loads

            articleWrapper.addEventListener('scroll', function () {
                const scrollTop = articleWrapper.scrollTop;
                const scrollHeight = articleWrapper.scrollHeight;
                const clientHeight = articleWrapper.clientHeight;

                // Check if user has scrolled near the bottom
                if (!loading && scrollTop + clientHeight >= scrollHeight - 50) {
                    loadMorePosts();
                }
            });


            document.getElementById('show-liked-posts-btn').addEventListener('click', function () {
                viewingLikedPosts = true;
                viewingSavedPosts = false;
                currentPage = 1;  // Reset pagination
                document.getElementById('article-wrapper').innerHTML = '';  // Clear existing posts
                loadMorePosts();  // Fetch liked posts
            });

            document.getElementById('show-saved-posts-btn').addEventListener('click', function () {
                viewingLikedPosts = false;
                viewingSavedPosts = true;
                currentPage = 1;  // Reset pagination
                document.getElementById('article-wrapper').innerHTML = '';  // Clear existing posts
                loadMorePosts();  // Fetch saved posts
            });

            document.getElementById('show-all-posts-btn').addEventListener('click', function () {
                viewingLikedPosts = false;
                viewingSavedPosts = false;
                currentPage = 1;  // Reset pagination
                document.getElementById('article-wrapper').innerHTML = '';  // Clear existing posts
                loadMorePosts();  // Fetch all posts
            });


            async function loadMorePosts() {
                loading = true;  // Prevent multiple triggers
                let response;

                try {
                    // Log the current view state
                    console.log("viewingLikedPosts: ", viewingLikedPosts);
                    console.log("viewingSavedPosts: ", viewingSavedPosts);

                    // Use flags to fetch only liked or saved posts
                    if (viewingLikedPosts) {
                        console.log('Fetching liked posts...');
                        response = await fetch(`/profile/liked?page=${currentPage + 1}`);
                    } else if (viewingSavedPosts) {
                        console.log('Fetching saved posts...');
                        response = await fetch(`/profile/saved?page=${currentPage + 1}`);
                    } else {
                        console.log('Fetching all posts...');
                        response = await fetch(`/profile/posts?page=${currentPage + 1}`);
                    }

                    const data = await response.json();

                    // Check the response
                    console.log('Fetched posts: ', data.posts);

                    if (data.posts && data.posts.length > 0) {
                        appendPostsToContainer(data.posts);
                        currentPage++;
                    } else {
                        console.log('No more posts to load');
                    }
                } catch (error) {
                    console.error('Error loading more posts:', error);
                }

                loading = false;
            }



            function appendPostsToContainer(posts) {
                const articleWrapper = document.getElementById('article-wrapper');

                posts.forEach(post => {
                    const postContainer = document.createElement('div');
                    postContainer.classList.add('container');

                    postContainer.innerHTML = `
            <div class="media">
                <img src="${post.filePath}" alt="${post.title} Media">
            </div>
            <div class="description">
                <h1>${post.title}</h1>
                <p>${post.description}</p>
            </div>
        `;
                    articleWrapper.appendChild(postContainer);
                });
            }

        });

    </script>
</body>

</html>